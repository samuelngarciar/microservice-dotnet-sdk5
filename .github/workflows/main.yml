name: .NET CI/CD Pipeline
on:
  push:
    branches: [ main ]

permissions:
  contents: read
  issues: write

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      # Build Docker container
      - name: Setup Docker
        run: |
          cd ./hello-world-dotnet
          docker build . -t hello-world-dotnet:latest
          docker run -d --rm \
            -e ASPNETCORE_URLS=http://+:5000 \
            -e ASPNETCORE_ENVIRONMENT=Development \
            -p 5000:5000 \
            hello-world-dotnet:latest
      
      # Verify Application Accessibility
      - name: Verify Application
        run: |
          sleep 5
          curl http://localhost:5000
      
      # Security Checks
      - name: OWASP ZAP Scan
        uses: zaproxy/action-full-scan@v0.12.0
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          docker_name: 'ghcr.io/zaproxy/zaproxy:stable'
          target: 'http://localhost:5000'
          cmd_options: '-a'
          fail_action: false
          
      - name: Verify Project Files
        run: |
          ls -la ./hello-world-dotnet/*.csproj
          cat ./hello-world-dotnet/hello-world-dotnet.csproj | head -n 5
    
      - name: Check Working Directory
        run: pwd && ls -la   
        
      # Dependency Scanning
      - name: Set up Snyk CLI to check for security issues
        # Snyk can be used to break the build when it detects security issues.
        # In this case we want to upload the SAST issues to GitHub Code Scanning
        uses: snyk/actions/setup@806182742461562b67788a64410098c9d9b96adb

        # For Snyk Open Source you must first set up the development environment for your application's dependencies
        # For example for Node
        #- uses: actions/setup-node@v4
        #  with:
        #    node-version: 20

        env:
          # This is where you will need to introduce the Snyk API token created with your Snyk account
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

        # Runs Snyk Code (SAST) analysis and uploads result into GitHub.
        # Use || true to not fail the pipeline
      - name: Snyk Code test
        run: snyk code test --sarif > snyk-code.sarif # || true

        # Runs Snyk Open Source (SCA) analysis and uploads result to Snyk.
      - name: Snyk Open Source monitor
        run: snyk monitor --all-projects

        # Runs Snyk Infrastructure as Code (IaC) analysis and uploads result to Snyk.
        # Use || true to not fail the pipeline.
      - name: Snyk IaC test and report
        run: snyk iac test --report # || true

        # Build the docker image for testing
      - name: Build a Docker image
        run: docker build -t your/image-to-test .
        # Runs Snyk Container (Container and SCA) analysis and uploads result to Snyk.
      - name: Snyk Container monitor
        run: snyk container monitor your/image-to-test --file=Dockerfile

        # Push the Snyk Code results into GitHub Code Scanning tab
      - name: Upload result to GitHub Code Scanning
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: snyk-code.sarif

